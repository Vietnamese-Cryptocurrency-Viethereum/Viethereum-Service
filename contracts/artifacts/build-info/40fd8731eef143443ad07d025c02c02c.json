{
	"id": "40fd8731eef143443ad07d025c02c02c",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Viethereum.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n// Author: iHuydang\n\ncontract Viethereum is ERC20 {\n    uint256 public constant SALE_THRESHOLD = 1_000_000 * 10**decimals(); // Threshold for total amount of tokens sold\n    uint256 public totalPurchasedTokens = 0;\n    uint256 public totalRedeemedTokens = 0;\n    address private constant RESERVED_WALLET = 0x39bFD3A19D7f46Dd2dbbBEbBA43a654b6b215Ae3; // Address to hold the reserved tokens\n    AggregatorV3Interface internal priceFeed;\n\n    constructor(address priceFeedAddress) ERC20(\"Viethereum\", \"VIETH\") {\n        _mint(_msgSender(), 10_000_000 * 10**decimals()); // Mint tokens to deployer\n        _mint(RESERVED_WALLET, 10_000_000 * 10**decimals()); // Mint reserved tokens to the specified wallet\n        priceFeed = AggregatorV3Interface(priceFeedAddress); // Initialize Chainlink Price Feed\n    }\n\n    // Function to get the VNĐ/USDT price from Chainlink\n    function getLatestPrice() public view returns (int) {\n        (, int price, , , ) = priceFeed.latestRoundData();\n        return price;\n    }\n\n    // Function to get the VNĐ exchange rate\n    function getRateVNĐ() public view returns (uint256) {\n        int price = getLatestPrice();\n        require(price > 0, \"Price must be positive\");\n        return (1000 * 10**decimals()) / uint256(price); // Exchange rate with VNĐ\n    }\n\n    // Function to sell tokens and receive VNĐ\n    function sellTokens(uint256 tokenAmount) public {\n        require(balanceOf(msg.sender) >= tokenAmount, \"Insufficient balance\");\n        uint256 vnđAmount = tokenAmount * getRateVNĐ();\n        totalRedeemedTokens += tokenAmount;\n\n        // Adjust sale rate if threshold is reached\n        if (totalRedeemedTokens >= SALE_THRESHOLD) {\n            uint256 newRateVNĐ = getRateVNĐ() * 999_999 / 1_000_000;\n            // Apply new VNĐ rate here\n        }\n\n        // Transfer VNĐ here\n        // Note: The actual VNĐ transfer needs integration with VNĐ payment mechanism\n    }\n\n    // Function to buy tokens\n    function buyTokens(uint256 usdtAmount) public {\n        require(usdtAmount > 0, \"Amount must be greater than zero\");\n        uint256 rateVNĐ = getRateVNĐ();\n        require(rateVNĐ > 0, \"Rate VNĐ must be positive\");\n        uint256 tokenAmount = (usdtAmount * 10**decimals()) / rateVNĐ;\n        require(tokenAmount > 0, \"Token amount must be greater than zero\");\n        totalPurchasedTokens += tokenAmount;\n\n        // Adjust purchase rate if threshold is reached\n        if (totalPurchasedTokens >= SALE_THRESHOLD) {\n            uint256 newRateVNĐ = getRateVNĐ() * 999_000 / 1_000_000;\n            // Apply new VNĐ rate here\n        }\n\n        // Transfer VIETH here\n    }\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"errors": [
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/Viethereum.sol\n\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "contracts/Viethereum.sol",
					"start": -1
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "3420",
				"formattedMessage": "Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.26;\"\n--> contracts/Viethereum.sol\n\n",
				"message": "Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.26;\"",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "contracts/Viethereum.sol",
					"start": -1
				},
				"type": "Warning"
			}
		],
		"sources": {
			"contracts/Viethereum.sol": {
				"ast": {
					"absolutePath": "contracts/Viethereum.sol",
					"exportedSymbols": {
						"Viethereum": {
							"exportedSymbols": {
								"constructor": {
									"type": "constructor",
									"inputs": [
										{
											"internalType": "address",
											"name": "priceFeedAddress",
											"type": "address"
										}
									]
								}
							}
						}
					},
					"id": 1,
					"nodeType": "SourceUnit",
					"nodes": [],
					"src": "0:0:0"
				},
				"id": 0
			}
		}
	}
}
